https://stackoverflow.com/questions/34709286/cmake-configure-deep-sub-folder-tree
https://stackoverflow.com/questions/40227333/cmake-setup-multiple-projects-and-dependiencies-between-them
https://stackoverflow.com/questions/8934295/add-source-in-a-subdirectory-to-a-cmake-project
https://stackoverflow.com/questions/34709286/cmake-configure-deep-sub-folder-tree
https://stackoverflow.com/questions/34709286/cmake-configure-deep-sub-folder-tree
https://stackoverflow.com/questions/9673326/cmakelists-txt-files-for-multiple-libraries-and-executables

http://derekmolloy.ie/hello-world-introductions-to-cmake/
https://pusling.com/blog/?p=352
https://mirkokiefer.com/cmake-by-example-f95eb47d45b1
https://stackoverflow.com/questions/6693100/how-to-generate-windows-dll-versioning-information-with-cmake



Therefore, suppose you are creating a library A that uses some Boost headers. You would do:
-target_include_directories(A PRIVATE ${Boost_INCLUDE_DIRS}) if you only use those Boost headers inside your source files (.cpp) or private header files (.h).
-target_include_directories(A INTERFACE ${Boost_INCLUDE_DIRS}) if you don't use those Boost headers inside your source files (therefore, not needing them to compile A). I can't actually think of a real-world example for this.
-target_include_directories(A PUBLIC ${Boost_INCLUDE_DIRS}) if you use those Boost headers in your public header files, which are included BOTH in some of A's source files and might also be included in any other client of your A library

